name: Deploy Application

on: 
  push:
    branches: [main]

jobs:
  build: 
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup React Application
        uses: actions/setup-node@v4
        with: 
          node-version: 'latest'

      - name: Install Dependencies
        run: cd my-app && npm ci

      - name: React Build Project
        run: cd my-app && npm run build

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: cd my-app && docker build -t victorrippi/ghactions .

      - name: Push Docker Image
        run: cd my-app && docker push victorrippi/ghactions

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Copy docker-compose file to EC2
        run: scp -o StrictHostKeyChecking=no -i key.pem my-app/docker-compose.yml ubuntu@${{ secrets.EC2_INSTANCE }}:/home/ubuntu/docker-compose.yml

      - name: Copy Nginx config file to EC2
        run: scp -o StrictHostKeyChecking=no -i key.pem my-app/nginx.conf ubuntu@${{ secrets.EC2_INSTANCE }}:/home/ubuntu/nginx.conf

      - name: SSH into EC2 and Deploy with Docker Swarm
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_INSTANCE }} << 'EOF'
          sudo docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') || true
          sudo docker network create --driver overlay webnet || true
          sudo docker stack deploy -c /home/ubuntu/docker-compose.yml myapp
          EOF

      - name: Clean Up Docker Images
        run: ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_INSTANCE }} "sudo docker system prune -a"
